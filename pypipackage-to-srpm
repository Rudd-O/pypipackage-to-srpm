#!/usr/bin/env python

from __future__ import print_function

import argparse
import contextlib
import glob
import os
import shutil
import subprocess
import sys
import tarfile
import tempfile

try:
    import ConfigParser as configparser
except ImportError:
    import configparser

try:
    from pipes import quote
except ImportError:
    from shlex import quote


def flt(x):
	x[0] = os.path.sep if not x[0] else x[0]
	x[-2] = "*"
	return x
supplemental = [
	y
	for p in sys.path
	for y in glob.glob(os.path.join(*flt(p.split(os.path.sep))))
	if p.split(os.path.sep)[-1] == "site-packages"
	and y not in sys.path
]
[ sys.path.append(s) for s in supplemental ]
sys.path.append(os.path.dirname(__file__))
import pypipackagetosrpmmod as mod
[ sys.path.remove(s) for s in supplemental ]


@contextlib.contextmanager
def tmpdir(keeptemp=False):
  d = tempfile.mkdtemp()
  try:
    yield d
  finally:
    if not keeptemp:
      shutil.rmtree(d)


def mangle_specfile(path, requires, buildrequires, skip_mangling_name, patches):
  unmangled_name = None
  mangled_name = None
  names_defined = False
  lines = open(path, "r").readlines()
  for n, line in enumerate(lines[:]):
    if line.startswith("%define name "):
      unmangled_name = line[len("%define name "):]
      mangled_name = unmangled_name if skip_mangling_name else mod.mangle_name(unmangled_name)
      lines[n] = "%define unmangled_name " + unmangled_name + "%define mangled_name " + mangled_name 
    elif line.startswith("%define release "):
      if "%{?dist}" not in line:
        line = "%define release " + line[len("%define release "):-1] + "%{?dist}" + "\n"
      line = line.replace("%define release 1", "%define release %{?build_number}%{?!build_number:1}")
      lines[n] = line
    elif line.startswith("Name: "):
      lines[n] = lines[n].replace("%{name}", "%{mangled_name}")
      if requires:
        requires = "Requires: %s\n" % ", ".join(requires)
        lines[n] = lines[n] + requires
      if buildrequires:
        buildrequires = "BuildRequires: %s\n" % ", ".join(buildrequires)
        lines[n] = lines[n] + buildrequires
      names_defined = True
    elif line.startswith("Source") and patches:
        extralines = []
        for patchn, patch in enumerate(patches):
            line = line + "Patch%d: %s\n" % (patchn, os.path.basename(patch))
        lines[n] = line
    elif line.startswith("%setup") and patches:
      for patch in patches:
        line = line + "patch -p0 --binary < %%{_sourcedir}/%s\n" % quote(os.path.basename(patch))
      lines[n] = line
    if names_defined:
      lines[n] = lines[n].replace("%{name}", "%{unmangled_name}")
  out = open(path, "w")
  out.write("".join(lines))
  out.flush()
  out.close()


def run(*a, **kw):
  return subprocess.call(*a, **kw) == 0


def remove_spaces_in_first_component(tarfile_path, newtarfile_path):
    tar = tarfile.open(tarfile_path, "r:gz")
    newtar = tarfile.open(newtarfile_path, "w:gz")
    for tarinfo in tar:
        oldcomps = tarinfo.name
        comps = tarinfo.name.split(os.path.sep)
        comps[0] = comps[0].replace(" ", "")
        tarinfo.name = os.path.sep.join(comps)
        newtar.addfile(tarinfo, tar.extractfile(tarinfo))
    tar.close()
    newtar.close()
    return newtarfile_path


def package(path, outputdir, keeptemp, skip_mangling_name=False, skip_binary_rpms=False, patches=None):
  patches = [] if patches is None else patches
  if not os.path.isdir(outputdir):
    raise ValueError("%r must be a directory and must exist" % outputdir)
  with tmpdir(keeptemp) as td:
    if keeptemp:
      print("Temporary work directory:", td)
    if path.endswith(".tar.gz"):
      if not run(["tar", "-zx", "-C", td, "-f", path]):
        print("Error uncompressing.\n", file=sys.stderr)
        return 8
    elif path.endswith(".zip"):
      if not run(["unzip", "-d", td, path]):
        print("Error uncompressing:\n", file=sys.stderr)
        return 8
    else:
      assert 0, "Do not know how to handle file type of %r" % path
    sourcepath = glob.glob(os.path.join(td, "*"))[0]
    if " " in sourcepath:
        new_sourcepath = sourcepath.replace(" ", "")
        print("Renaming %s to %s" % (sourcepath, new_sourcepath), file=sys.stderr)
        os.rename(sourcepath, new_sourcepath)
        sourcepath = new_sourcepath
        del new_sourcepath
    for patch in patches:
        text = open(patch, "rb").read()
        with tempfile.NamedTemporaryFile() as pf:
          if ".unix2dos." in patch:
            try:
              text = text.replace("\n", "\r\n")
            except TypeError:
              text = text.replace(b"\n", b"\r\n")
          pf.write(text)
          pf.flush()
          pf.seek(0)
          if not run(['patch', '-p0', '--binary'], cwd=sourcepath, stdin=pf):
            print("Error in patching %s." % patch, file=sys.stderr)
            return 10
    if not run([sys.executable, "setup.py", "bdist_rpm", "--spec-only"], cwd=sourcepath):
      print("Error in bdist_rpm.", file=sys.stderr)
      return 10
    try:
        requiresfile = glob.glob(os.path.join(td, "*", "*.egg-info", "requires.txt"))[0]
        orgrequires = open(requiresfile).readlines()
        requires = mod.gen_requires(orgrequires)
    except IndexError:
        orgrequires = []
        requires = []
    print("Original requires: %s" % orgrequires, file=sys.stderr)
    print("Requires: %s" % requires, file=sys.stderr)
    try:
      findcfiles = subprocess.check_output(["find", td, "-name", "*.c", "-print0"])
    except subprocess.CalledProcessError as e:
      print("Error in finding C files: %s." % e, file=sys.stderr)
      return 10
    if findcfiles:
      buildrequires = ["python%s-devel" % (sys.version_info.major, )]
    else:
      buildrequires = []
    setupcfg = configparser.ConfigParser()
    try:
        setupcfgf = glob.glob(os.path.join(td, "*", "setup.cfg"))[0]
        setupcfg.read(setupcfgf)
        breq = setupcfg.get('bdist_rpm', 'build_requires')
    except (IOError, OSError, KeyError, IndexError, configparser.NoSectionError, configparser.NoOptionError):
        breq = ""
    if breq.strip():
      buildrequires.extend([x.strip() for x in breq.split(",")])
    print("BuildRequires: %s" % buildrequires, file=sys.stderr)
    def rpm(*args):
      return run(["rpm", "--define", "%%_topdir %s/RPM" % td] + list(args))
    def rpmbuild(*args):
      return run(["rpmbuild", "--define", "%%_topdir %s/RPM" % td] + list(args))
    specfile = glob.glob(os.path.join(td, "*", "dist", "*.spec"))[0]
    rpmsourcesdir = os.path.join(td, "RPM", "SOURCES")
    if not os.path.isdir(rpmsourcesdir):
        os.makedirs(rpmsourcesdir)
    for patch in patches:
        text = open(patch, "rb").read()
        if ".unix2dos." in patch:
          try:
            text = text.replace("\n", "\r\n")
          except TypeError:
            text = text.replace(b"\n", b"\r\n")
        open(os.path.join(td, "RPM", "SOURCES", os.path.basename(patch)), "wb").write(text)
    remove_spaces_in_first_component(path, os.path.join(td, "RPM", "SOURCES", os.path.basename(path)))
    mangle_specfile(specfile, requires, buildrequires, skip_mangling_name, patches)
    if not rpmbuild("-bs", specfile):
      print("Error constructing final source RPM.", file=sys.stderr)
      sys.stderr.write(open(specfile).read())
      return 14
    srpm = glob.glob(os.path.join(td, "RPM", "SRPMS", "*.src.rpm"))[0]
    if not skip_binary_rpms:
      if not rpmbuild("--rebuild", srpm):
        print("Error rebuilding final source RPM.", file=sys.stderr)
        return 16
      brpm = glob.glob(os.path.join(td, "RPM", "RPMS", "*", "*.rpm"))[0]
      print("Package %s provides:" % os.path.basename(brpm), file=sys.stderr)
      if not rpm("-qp", "--provides", brpm):
        print("Error querying final binary RPM.", file=sys.stderr)
        return 17
      print("Package %s requires:" % os.path.basename(brpm), file=sys.stderr)
      if not rpm("-qp", "--requires", brpm):
        print("Error querying final binary RPM.", file=sys.stderr)
        return 17
    destfile = os.path.join(outputdir, os.path.basename(srpm))
    if os.path.exists(destfile):
      print("Error: not replacing %r" % destfile, file=sys.stderr)
      return 19
    shutil.move(srpm, destfile)


def main():
  parser = argparse.ArgumentParser(description="Turn downloaded PyPI packages into source RPMs")
  parser.add_argument('--outputdir',
    dest="outputdir",
    help="Output directory to store the source RPMs into (must exist, default: current directory)",
    action="store",
    default=os.path.curdir,
  )
  parser.add_argument('--keeptemp',
    dest="keeptemp",
    help="Print and keep the temporary work directory",
    action="store_true",
    default=False,
  )
  parser.add_argument('--no-mangle-name',
    dest="nomanglename",
    help="Avoid mangling the package name",
    action="store_true",
    default=False,
  )
  parser.add_argument('--no-binary-rpms',
    dest="nobinaryrpms",
    help="Skip the construction of binary RPMs",
    action="store_true",
    default=False,
  )
  parser.add_argument('source',
    metavar="SOURCE",
    type=str,
    nargs=1,
    help="Source tarball, zip file or wheel",
  )
  parser.add_argument('patches',
    metavar="PATCHES",
    type=str,
    nargs='*',
    help="Plain text diff-formatted patches",
  )
  args = parser.parse_args()
  ret = package(args.source[0], args.outputdir, args.keeptemp, args.nomanglename, args.nobinaryrpms, args.patches)
  if ret:
    sys.exit(ret)

if __name__ == "__main__":
  os.environ["http_proxy"] = "http://127.0.0.1:1"
  os.environ["https_proxy"] = "http://127.0.0.1:1"
  main()
